version: '3.8'

networks:
  app_network:
    driver: bridge

services:
  proxy:
    build:
      context: ./Nginx
      dockerfile: Dockerfile
    container_name: nginx_proxy
    ports:
      - "80:80"  
    volumes:
      - ./Nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro 
    depends_on:
      - app
      - api 
    networks:
      - app_network 
    restart: always

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: devopssample-app:latest
    container_name: react_app
    expose:
      - "80"
    networks:
      - app_network
    restart: always
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: devopssample-api:latest
    container_name: python_api
    environment:
      MYSQL_HOST: db
      MYSQL_USER: admin
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: taskdb
    expose:
      - "5000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    restart: always


  db:
    image: mysql:8.0 
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: admin 
      MYSQL_DATABASE: taskdb    
      MYSQL_USER: admin         
    volumes:
      - db_data:/var/lib/mysql
      - ./Api/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./Api/create_user_and_grants.sql:/docker-entrypoint-initdb.d/create_user_and_grants.sql:ro
    ports:
      - "3306:3306" 
    networks:
      - app_network 
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-padmin"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 60s

volumes:
  db_data: